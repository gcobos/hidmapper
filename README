
HIDMapper intercepts and translates native events (or sequences of events) coming from an input device into other events, allowing us to build more complex and useful
sequences (gestures). Repurpose a wireless device to build whatever interface you can imagine. Specially useful are the wireless 5-button mices.

Defining a new device mapping

As device, we can either specify /dev/input/eventX, but these numbers may change on reboot. Look into the /dev/input/by-id.
I recommend to always use /dev/input/by-id/MyMouseName-event-mouse as device instead of the eventX files. Note that you'll
find MyMouseName-mouse and MyMouseName-event-mouse, of which only the latter will work with evdev. Ignore the former.


Any time a set of gestures is received, they are added to the matcher, which processes them to form complete gestures and returns
the number of codes that are completed, and deleted from the queue inside the matcher.

matcher = HIDMapperMatcher(profile_gestures)

The list of gestures from a profile 'profile_gestures', carries a frequency of use for every item, to determine the probability of
success of the matcher. Internally, the matcher has a queue of a length 4 times the longest code used.

matcher.set_prefix(set of gestures)
gestures_matched = matcher.get_matched_elements()

